/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/networkmenu_screen/NetworkMenuViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

NetworkMenuViewBase::NetworkMenuViewBase() :
    buttonCallback(this, &NetworkMenuViewBase::buttonCallbackHandler),
    updateItemCallback(this, &NetworkMenuViewBase::updateItemCallbackHandler)
{

    __background.setPosition(0, 0, 320, 240);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_LISTBACKGROUND_ID));

    headline.setPosition(50, 14, 220, 29);
    headline.setColor(touchgfx::Color::getColorFromRGB(16, 141, 171));
    headline.setLinespacing(0);
    headline.setTypedText(touchgfx::TypedText(T_NETWORKHEADLINE));

    button1.setXY(18, 11);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_GOBACK_ID), touchgfx::Bitmap(BITMAP_GOBACK_ID));
    button1.setAction(buttonCallback);

    FunctionList.setPosition(60, 86, 200, 120);
    FunctionList.setHorizontal(true);
    FunctionList.setCircular(true);
    FunctionList.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    FunctionList.setSwipeAcceleration(10);
    FunctionList.setDragAcceleration(10);
    FunctionList.setNumberOfItems(3);
    FunctionList.setPadding(0, 0);
    FunctionList.setSnapping(false);
    FunctionList.setDrawableSize(200, 0);
    FunctionList.setDrawables(FunctionListListItems, updateItemCallback);

    notification1.setXY(35, 57);
    notification1.setVisible(false);

    add(__background);
    add(image1);
    add(headline);
    add(button1);
    add(FunctionList);
    add(notification1);
}

void NetworkMenuViewBase::setupScreen()
{
    FunctionList.initialize();
    for (int i = 0; i < FunctionListListItems.getNumberOfDrawables(); i++)
    {
        FunctionListListItems[i].initialize();
    }
    notification1.initialize();
}

void NetworkMenuViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
}

void NetworkMenuViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &FunctionListListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        NetworkList* cc = (NetworkList*)d;
        FunctionListUpdateItem(*cc, itemIndex);
    }
}
