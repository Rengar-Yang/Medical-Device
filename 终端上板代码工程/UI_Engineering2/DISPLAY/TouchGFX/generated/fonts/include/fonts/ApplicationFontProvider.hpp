/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#ifndef TOUCHGFX_APPLICATIONFONTPROVIDER_HPP
#define TOUCHGFX_APPLICATIONFONTPROVIDER_HPP

#include <touchgfx/FontManager.hpp>

namespace touchgfx
{
class FlashDataReader;
}

struct Typography
{
    static const touchgfx::FontId SMALL = 0;
    static const touchgfx::FontId TINY = 1;
    static const touchgfx::FontId KOREANTINY = 2;
    static const touchgfx::FontId ARABICTINY = 3;
    static const touchgfx::FontId KOREANSMALL = 4;
    static const touchgfx::FontId KOREANNORMAL = 5;
    static const touchgfx::FontId JP_CN_SMALL = 6;
    static const touchgfx::FontId JP_CN_TINY = 7;
    static const touchgfx::FontId ARABICSMALL = 8;
    static const touchgfx::FontId DEBUG = 9;
};

struct TypographyFontIndex
{
    static const touchgfx::FontId SMALL = 0;        // chinese_msyh_20_4bpp
    static const touchgfx::FontId TINY = 1;         // chinese_msyh_10_4bpp
    static const touchgfx::FontId KOREANTINY = 2;   // NanumGothic_14_4bpp
    static const touchgfx::FontId ARABICTINY = 3;   // Amiri_Regular_18_2bpp
    static const touchgfx::FontId KOREANSMALL = 4;  // NanumGothic_20_4bpp
    static const touchgfx::FontId KOREANNORMAL = 5; // NanumGothic_30_4bpp
    static const touchgfx::FontId JP_CN_SMALL = 0;  // chinese_msyh_20_4bpp
    static const touchgfx::FontId JP_CN_TINY = 6;   // chinese_msyh_14_4bpp
    static const touchgfx::FontId ARABICSMALL = 7;  // Amiri_Regular_22_4bpp
    static const touchgfx::FontId DEBUG = 0;        // chinese_msyh_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
{
public:
    virtual touchgfx::Font* getFont(touchgfx::FontId typography);

    static void setFlashReader(touchgfx::FlashDataReader* /* flashReader */)
    {
    }
    static touchgfx::FlashDataReader* getFlashReader()
    {
        return 0;
    }
};

#endif // TOUCHGFX_APPLICATIONFONTPROVIDER_HPP
